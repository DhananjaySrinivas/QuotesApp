{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dhananjay srinivas\\\\Desktop\\\\REACT\\\\Router-demo\\\\src\\\\pages\\\\QuoteDetail.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment } from \"react\";\nimport { Link, Route, useParams, useRouteMatch } from \"react-router-dom\";\nimport HighlitedQuote from \"../components/quotes/HighlightedQuote\";\nimport Comments from \"../components/comments/Comments\";\nimport useHttp from \"../components/hooks/use-http\";\nimport { getSingleQuote } from \"../components/lib/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst QuoteDetail = () => {\n  _s();\n\n  const params = useParams();\n  const match = useRouteMatch();\n  const DUMMY_QUOTES = [{\n    id: \"q1\",\n    author: \"Dhanu\",\n    text: \"learning React is fun!\"\n  }, {\n    id: \"q2\",\n    author: \"Chandu\",\n    text: \"learning React is great!\"\n  }, {\n    id: \"q3\",\n    author: \"Ullas\",\n    text: \"learning React is love!\"\n  }];\n  const quote = DUMMY_QUOTES.find(quote => quote.id === params.quoteId);\n\n  if (!quote) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No Quote Found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(HighlitedQuote, {\n      text: quote.text,\n      author: quote.author\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: match.path,\n      exact: true,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"centered\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          className: \"btn--flat\",\n          to: `${match.url}/comments`,\n          children: [\" \", \"Comments\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: `${match.path}/comments`,\n      children: /*#__PURE__*/_jsxDEV(Comments, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\n_s(QuoteDetail, \"Z/bFVfTt127x9UIB6x9JiYH3soU=\", false, function () {\n  return [useParams, useRouteMatch];\n});\n\n_c = QuoteDetail;\nexport default QuoteDetail;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuoteDetail\");","map":{"version":3,"sources":["C:/Users/Dhananjay srinivas/Desktop/REACT/Router-demo/src/pages/QuoteDetail.js"],"names":["Fragment","Link","Route","useParams","useRouteMatch","HighlitedQuote","Comments","useHttp","getSingleQuote","QuoteDetail","params","match","DUMMY_QUOTES","id","author","text","quote","find","quoteId","path","url"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,SAAtB,EAAgCC,aAAhC,QAAqD,kBAArD;AACA,OAAOC,cAAP,MAA2B,uCAA3B;AACA,OAAOC,QAAP,MAAqB,iCAArB;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,SAASC,cAAT,QAA+B,uBAA/B;;;AACA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAMC,MAAM,GAAGP,SAAS,EAAxB;AACA,QAAMQ,KAAK,GAAEP,aAAa,EAA1B;AACA,QAAMQ,YAAY,GAAG,CACnB;AAAEC,IAAAA,EAAE,EAAE,IAAN;AAAYC,IAAAA,MAAM,EAAE,OAApB;AAA6BC,IAAAA,IAAI,EAAE;AAAnC,GADmB,EAEnB;AAAEF,IAAAA,EAAE,EAAE,IAAN;AAAYC,IAAAA,MAAM,EAAE,QAApB;AAA8BC,IAAAA,IAAI,EAAE;AAApC,GAFmB,EAGnB;AAAEF,IAAAA,EAAE,EAAE,IAAN;AAAYC,IAAAA,MAAM,EAAE,OAApB;AAA6BC,IAAAA,IAAI,EAAE;AAAnC,GAHmB,CAArB;AAKA,QAAMC,KAAK,GAAGJ,YAAY,CAACK,IAAb,CAAmBD,KAAD,IAAWA,KAAK,CAACH,EAAN,KAAaH,MAAM,CAACQ,OAAjD,CAAd;;AACA,MAAI,CAACF,KAAL,EAAY;AACV,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,cAAD;AAAgB,MAAA,IAAI,EAAEA,KAAK,CAACD,IAA5B;AAAkC,MAAA,MAAM,EAAEC,KAAK,CAACF;AAAhD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAEH,KAAK,CAACQ,IAAnB;AAAyB,MAAA,KAAK,MAA9B;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,SAAS,EAAC,WAAhB;AAA4B,UAAA,EAAE,EAAG,GAAER,KAAK,CAACS,GAAI,WAA7C;AAAA,qBACG,GADH,cAEW,GAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,eAWE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAG,GAAET,KAAK,CAACQ,IAAK,WAA3B;AAAA,6BACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CA7BD;;GAAMV,W;UACWN,S,EACFC,a;;;KAFTK,W;AA8BN,eAAeA,WAAf","sourcesContent":["import { Fragment } from \"react\";\r\nimport { Link, Route, useParams,useRouteMatch } from \"react-router-dom\";\r\nimport HighlitedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport useHttp from \"../components/hooks/use-http\";\r\nimport { getSingleQuote } from \"../components/lib/api\";\r\nconst QuoteDetail = () => {\r\n  const params = useParams();\r\n  const match =useRouteMatch()\r\n  const DUMMY_QUOTES = [\r\n    { id: \"q1\", author: \"Dhanu\", text: \"learning React is fun!\" },\r\n    { id: \"q2\", author: \"Chandu\", text: \"learning React is great!\" },\r\n    { id: \"q3\", author: \"Ullas\", text: \"learning React is love!\" },\r\n  ];\r\n  const quote = DUMMY_QUOTES.find((quote) => quote.id === params.quoteId);\r\n  if (!quote) {\r\n    return <p>No Quote Found</p>;\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <HighlitedQuote text={quote.text} author={quote.author} />\r\n      <Route path={match.path} exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n            {\" \"}\r\n            Comments{\" \"}\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default QuoteDetail;\r\n"]},"metadata":{},"sourceType":"module"}